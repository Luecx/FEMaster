#include "quadrature.h"
#include <cmath>

namespace fem {
namespace quadrature {

using namespace fem::math;

// ORDER_LINEAR or ORDER_CONSTANT
constexpr Point domain_iso_tet_points_1[] = {
    Point(1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 6.0)
};

// ORDER_QUADRATIC
constexpr Precision p1 = 1 / (3 * csqrt(5) - 5);
constexpr Precision p2 = 1 / (csqrt(5) + 5);
constexpr Point domain_iso_tet_points_4[] = {
    Point(p2, p2, p2, 1.0 / 4.0 / 6.0),
    Point(p1, p2, p2, 1.0 / 4.0 / 6.0),
    Point(p2, p1, p2, 1.0 / 4.0 / 6.0),
    Point(p2, p2, p1, 1.0 / 4.0 / 6.0)
};

// ORDER_CUBIC
constexpr Point domain_iso_tet_points_5[] = {
    Point(1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0, -4.0 / 5.0  / 6.0),
    Point(1.0 / 2.0, 1.0 / 6.0, 1.0 / 6.0,  9.0 / 20.0 / 6.0),
    Point(1.0 / 6.0, 1.0 / 6.0, 1.0 / 6.0,  9.0 / 20.0 / 6.0),
    Point(1.0 / 6.0, 1.0 / 6.0, 1.0 / 2.0,  9.0 / 20.0 / 6.0),
    Point(1.0 / 6.0, 1.0 / 2.0, 1.0 / 6.0,  9.0 / 20.0 / 6.0)
};

// ORDER_QUARTIC (8-point Gauss rule)
constexpr Point domain_iso_tet_points_8[] = {
    Point(0.0158359099, 0.3280546970, 0.3280546970, 0.138527967 / 6.0),
    Point(0.3280546970, 0.0158359099, 0.3280546970, 0.138527967 / 6.0),
    Point(0.3280546970, 0.3280546970, 0.0158359099, 0.138527967 / 6.0),
    Point(0.3280546970, 0.3280546970, 0.3280546970, 0.138527967 / 6.0),
    Point(0.6791431780, 0.1069522740, 0.1069522740, 0.111472033 / 6.0),
    Point(0.1069522740, 0.6791431780, 0.1069522740, 0.111472033 / 6.0),
    Point(0.1069522740, 0.1069522740, 0.6791431780, 0.111472033 / 6.0),
    Point(0.1069522740, 0.1069522740, 0.1069522740, 0.111472033 / 6.0)
};

// ORDER_QUINTIC (15-point rule)
constexpr Point domain_iso_tet_points_15[] = {
    Point(0.250000000000000, 0.250000000000000, 0.250000000000000, 0.030283678097089),
    Point(0.333333333333333, 0.333333333333333, 0.333333333333333, 0.006026785714286),
    Point(0.000000000000000, 0.333333333333333, 0.333333333333333, 0.006026785714286),
    Point(0.333333333333333, 0.000000000000000, 0.333333333333333, 0.006026785714286),
    Point(0.333333333333333, 0.333333333333333, 0.000000000000000, 0.006026785714286),
    Point(0.090909090909091, 0.090909090909091, 0.090909090909091, 0.011645249086029),
    Point(0.727272727272727, 0.090909090909091, 0.090909090909091, 0.011645249086029),
    Point(0.090909090909091, 0.727272727272727, 0.090909090909091, 0.011645249086029),
    Point(0.090909090909091, 0.090909090909091, 0.727272727272727, 0.011645249086029),
    Point(0.433449846426336, 0.066550153573664, 0.066550153573664, 0.010949141561386),
    Point(0.066550153573664, 0.433449846426336, 0.066550153573664, 0.010949141561386),
    Point(0.066550153573664, 0.066550153573664, 0.433449846426336, 0.010949141561386),
    Point(0.066550153573664, 0.433449846426336, 0.433449846426336, 0.010949141561386),
    Point(0.433449846426336, 0.066550153573664, 0.433449846426336, 0.010949141561386),
    Point(0.433449846426336, 0.433449846426336, 0.066550153573664, 0.010949141561386)
};

// Register the schemes globally
REGISTER_SCHEME(DOMAIN_ISO_TET, ORDER_CONSTANT  , domain_iso_tet_points_1);
REGISTER_SCHEME(DOMAIN_ISO_TET, ORDER_LINEAR    , domain_iso_tet_points_1);
REGISTER_SCHEME(DOMAIN_ISO_TET, ORDER_QUADRATIC , domain_iso_tet_points_4);
REGISTER_SCHEME(DOMAIN_ISO_TET, ORDER_CUBIC     , domain_iso_tet_points_5);
REGISTER_SCHEME(DOMAIN_ISO_TET, ORDER_QUARTIC   , domain_iso_tet_points_8);
REGISTER_SCHEME(DOMAIN_ISO_TET, ORDER_QUINTIC   , domain_iso_tet_points_15);

} // namespace quadrature
} // namespace fem
