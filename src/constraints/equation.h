/******************************************************************************
 * @file equation.h
 * @brief Declares the fundamental data structures for constraint equations.
 *
 * Constraint equations relate multiple degrees of freedom (DOFs) through
 * linear combinations. They are assembled by supports, couplings, connectors,
 * and ties before being consumed by the solver.
 *
 * @see src/constraints/equation.cpp
 * @see src/constraints/constraint_set.h
 * @author Finn Eggers
 * @date 06.03.2025
 ******************************************************************************/

#pragma once

#include "../core/types_cls.h"
#include "../core/types_eig.h"
#include "../core/types_num.h"

#include <cstdint>
#include <initializer_list>
#include <utility>
#include <vector>

namespace fem {
namespace constraint {

/******************************************************************************
 * @struct EquationEntry
 * @brief Represents a single term of a constraint equation.
 *
 * Each entry contributes `coeff * dof(node_id, dof)` to the overall equation.
 ******************************************************************************/
struct EquationEntry {
    ID node_id{};   ///< Global node identifier.
    Dim dof{};      ///< Degree-of-freedom index associated with the node.
    Precision coeff{}; ///< Scalar coefficient applied to the DOF.
};

/******************************************************************************
 * @enum EquationSourceKind
 * @brief Enumerates the origin of a constraint equation.
 ******************************************************************************/
enum class EquationSourceKind : uint8_t {
    Unknown = 0, ///< Source is unspecified.
    Support,     ///< Equation generated by a support constraint.
    Connector,   ///< Equation generated by a connector.
    Coupling,    ///< Equation generated by a coupling.
    Tie,         ///< Equation generated by a tie constraint.
    Manual       ///< Equation was injected manually.
};

/******************************************************************************
 * @struct Equation
 * @brief Captures a linear constraint over a set of DOFs.
 *
 * Equations are stored as sparse rows consisting of `EquationEntry` terms and
 * an optional right-hand side value.
 ******************************************************************************/
struct Equation {
    std::vector<EquationEntry> entries{}; ///< Sparse list of DOF contributions.
    Precision rhs{Precision(0)};          ///< Right-hand side value.
    EquationSourceKind source{EquationSourceKind::Unknown}; ///< Origin metadata.
    Index source_index{0};                ///< Index of the originating entity.

    /******************************************************************************
     * @brief Default constructor.
     ******************************************************************************/
    Equation() = default;

    /******************************************************************************
     * @brief Constructs an equation from a vector of entries and an RHS.
     *
     * @param e Vector of equation entries.
     * @param r Right-hand side value.
     ******************************************************************************/
    Equation(std::vector<EquationEntry> e, Precision r = Precision(0))
        : entries(std::move(e)), rhs(r) {}

    /******************************************************************************
     * @brief Constructs an equation from an initializer list and an RHS.
     *
     * @param e Initializer list of equation entries.
     * @param r Right-hand side value.
     ******************************************************************************/
    Equation(std::initializer_list<EquationEntry> e, Precision r = Precision(0))
        : entries(e), rhs(r) {}
};

/******************************************************************************
 * @brief Alias for a collection of constraint equations.
 ******************************************************************************/
using Equations = std::vector<Equation>;

} // namespace constraint
} // namespace fem
